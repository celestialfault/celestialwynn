plugins {
    id "fabric-loom" version "1.5-SNAPSHOT"
	id "org.jetbrains.kotlin.jvm" version "2.0.0"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
	maven { url = "https://maven.isxander.dev/releases" }
	maven { url = "https://maven.terraformersmc.com/" }
	maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
	maven { url = "https://maven.celestialfault.dev/snapshots" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	include(implementation("me.celestialfault:celestial-config:${project.celestialconfig_version}"))
	modImplementation "net.fabricmc:fabric-language-kotlin:1.11.0+kotlin.2.0.0"

	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	modImplementation("dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}") {
		// yacl 3.2.1 for 1.20.2 has dependencies that gradle can't resolve, causing the build to fail,
		// and I don't really want to depend on a beta version just to fix this; these don't matter for our use
		// case either way, so we can safely tell gradle to just ignore them.
		// see https://github.com/isXander/YetAnotherConfigLib/issues/111
		exclude(group: "org.quiltmc.parsers")
		exclude(group: "com.twelvemonkeys.common")
		exclude(group: "com.twelvemonkeys.imageio")
	}

	modRuntimeOnly "me.djtheredstoner:DevAuth-fabric:1.2.0"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

loom {
    accessWidenerPath = file("src/main/resources/celestialwynn.accesswidener")
	runs {
		remove server
	}
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}
